import {Enum} from "protobufjs";
import {normalizeComment, writeToFile} from "../utils";
import {snakeCase} from "change-case"

export async function generate(out: string, obj: Enum) {
    const file = `// Generated by sisyphus web
import {Enum} from "protobufjs";
import $reflection from "./_reflection"

${normalizeComment(obj.comment)}export enum ${obj.name} {
${generateEnum(obj)}
}

export namespace ${obj.name} {
    export const reflection = <Enum>$reflection.get("${obj.name}")
}\n`
    await writeToFile(out, `${snakeCase(obj.name)}.ts`, file)
}

function generateEnum(obj: Enum): string {
    let result: string[] = []

    for (let key in obj.valuesById) {
        let value = `${normalizeComment(obj.comments[obj.valuesById[key]])}${obj.valuesById[key]} = ${key}`
        result.push(value.replace(/(^|\n)/g, "$1    "))
    }

    return result.join(",\n")
}